<?php

drupal_add_css(drupal_get_path('module', 'jobhistoryfield').'/jobhistoryfield.css');
drupal_add_js(drupal_get_path('module', 'jobhistoryfield').'/jobhistoryfield.js');
require_once dirname(__FILE__) . '/jobhistoryfield_widget.inc';

//Global variables for this module
$taxonomy_array = array('test');

function my_in_array( $needle, $haystack ) 
{        
	if (is_array($haystack))
	{
		return in_array($needle, $haystack);
	} 
  else // array is undefined 
  {
    return false;
  }
}

// $Id$

//==========================================//
// DEFINE THE FIELD
//==========================================//

/**
* Implementation of hook_field_info().
*/
function jobhistoryfield_field_info() {
  return array(
    //~ The machine name of the field.
    'jobhistoryfield' => array(
      //~ The human-readable label of the field that will be seen in the Manage fields screen.
      'label'         => t('Job History'),
      //~ A description of what type of data the field stores.
      'description'   => t('Store data about a worked for company.'),
    ),
  );
}

/**
* Implementation of hook_field_settings().
*/
function jobhistoryfield_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
    //~ Define the colums that needs to be created in the database for storing the field data
      $columns['company'] = array(
        'type'      => 'varchar',
        'length'    => 50,
        'not null'  => FALSE,
        'sortable'  => TRUE,
        'views'     => TRUE,
      );
      $columns['position'] = array(
        'type'      => 'varchar',
        'length'    => 50,
        'not null'  => FALSE,
        'sortable'  => TRUE,
        'views'     => TRUE,
      );
      $columns['industry'] = array(
        'type'      => 'varchar',
        'length'    => 50,
        'not null'  => FALSE,
        'sortable'  => TRUE,
        'views'     => TRUE,
      );
      $columns['job_type'] = array(
        'type'      => 'varchar',
        'length'    => 50,
        'not null'  => FALSE,
        'sortable'  => TRUE,
        'views'     => TRUE,
      );
      $columns['fromdate'] = array(
        'type'      => 'varchar',
        'length'    => 50,
        'not null'  => FALSE,
        'sortable'  => TRUE,
        'views'     => TRUE,
      );
      $columns['todate'] = array(
        'type'      => 'varchar',
        'length'    => 50,
        'not null'  => FALSE,
        'sortable'  => TRUE,
        'views'     => TRUE,
      );
      return $columns;
  }
}

/**
* Implementation of hook_field().
*/
function jobhistoryfield_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      foreach ($items as $delta => $item) {
        if (!empty($item['company']) && empty($item['position'])) {
          form_set_error($item['position'], 'Position cannot be empty. Please provide a position for each job.');
          }
        }
          
    case 'presave':
      foreach ($items as $delta => $value) {
        _jobhistory_process($items[$delta], $delta, $field, $node);
      }
    break;
  }
}

function _jobhistory_process(&$item, $delta = 0, $field, $node) {
  
  // Handle taxonomy for Company subfield
  $company_tax_terms = taxonomy_get_term_by_name($item['company']);
  
  // Make sure that the term you are about to add to the node belongs to the correct vocabulary
  if (empty($company_tax_terms)) {
    $newterm = array('vid' => 22, 'name' => $item['company']);
    taxonomy_save_term($newterm);
  }
  $company_tax_terms = taxonomy_get_term_by_name($item['company']);
  $node->taxonomy[22][] = $company_tax_terms[0]->tid;
  
  
  // Handle taxonomy for Position subfield
  $position_tax_terms = taxonomy_get_term_by_name($item['position']);
  
  if (empty($position_tax_terms)) {
    $newterm = array('vid' => 10, 'name' => $item['position']);
    taxonomy_save_term($newterm);
  }
  $position_tax_terms = taxonomy_get_term_by_name($item['position']);
  $node->taxonomy[10][] = $position_tax_terms[0]->tid;
  
  $node_taxonomy_terms = taxonomy_node_get_terms($node);   

  //Decrease by 1 beacuase of "--Please Select--" in dropdown
  $item['industry'] = $item['industry']-1;

  //Handle taxonomy for Industry subfield
  $node->taxonomy[19][] = $item['industry'];
  
  
  //Handle taxonomy for Job Type subfield
  $node->taxonomy[25][] = $item['job_type'];
  
  //Set current job
  if ($item['currentjob'] == 1) {
    $item['todate'] = 'Current';
  }
 
}

/**
* Implementation of hook_content_is_empty().
*/
function jobhistoryfield_content_is_empty($item, $field) {
  if (empty($item['company'])) {
    return TRUE;
  }
  return FALSE;
}

//==========================================//
// DEFINING A FORMATTER
//==========================================//

/**
* Implementation of hook_theme().
*/
function jobhistoryfield_theme() {
  return array(
    // Themes for the formatters.
    'jobhistoryfield_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
* Implementation of hook_field_formatter_info().
*/
function jobhistoryfield_field_formatter_info() {
  return array(
    // The machine name of the formatter.
    'default' => array(
      // The human-readable label shown on the Display fields screen.
      'label' => t('Default'),
      // An array of the field types this formatter can be used on.
      'field types' => array('jobhistoryfield'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
* Theme function for 'default' companyfield formatter.
*/
function theme_jobhistoryfield_formatter_default($element) {
  $output  = '<div class="institution-field">'.$element['#item']['company'].'</div>';
  $output .= '<div class="achievement-field">'.$element['#item']['position'].'</div>';
  $output .= '<div class="achievement-field">'.$element['#item']['industry'].'</div>';
  
  $fromdate = strtotime($element['#item']['fromdate']);
  $fromdate = format_date($fromdate, $type='custom', $format='M Y');
  if($element['#item']['todate'] == 'Current')
    $todate = 'Current';
  else {
    $todate = strtotime($element['#item']['todate']);
    $todate = format_date($todate, $type='custom', $format='M Y');
  }
  
  $output .= $fromdate.' - '.$todate;
  
  return $output;
}
